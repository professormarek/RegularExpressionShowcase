import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * this program demonstrates the Java Regular Expression API in action.
 */
public class RegularExpressionShowcase {

    public static void main(String[] args){
        //let's introduce a string to match regular expressions against
        String sequence = "  1 agtagttcgc ctgtgtgagc tgacaaactt agtagtgttt gtgaggatta acaacaatta\n" +
                          " 61 acacagtgcg agctgtttct tagcacgaag atctcgatgt ctaagaaacc aggagggccc\n" +
                          "121 ggcaagagcc gggctgtcaa tatgctaaaa cgcggaatgc cccgcgtgtt gtccttgatt\n" +
                          "181 ggactgaaga gggctatgtt gagcctgatc gacggcaagg ggccaatacg atttgtgttg\n" ;

        System.out.println("Input sequence is: " + sequence + "\nthe lenght of this string is: " + sequence.length());

        /**TASK1 - locate the line numbers in the string**/

        //first we use the Pattern class to compile a regular expression into a Pattern object
        //note: it's a stsatic method call on the Pattern class that accomplishes this
        //our initial pattern will be used to locate the line numbers (Task 1)
        Pattern lineNumberPattern = Pattern.compile("\\d+"); //notice we escape the escape character (//)
        //recall: Matcher will be used to match the pattern against the input string; the Matcher comes from the Pattern
        Matcher lineNumberMatcher = lineNumberPattern.matcher(sequence);
        //write a loop to visit or inspect each match generated by the Matcher
        while(lineNumberMatcher.find()){
            //for now, just print it to see
            System.out.println("found: " +  lineNumberMatcher.group() + " at position " + lineNumberMatcher.start()
                + " and ending at position " + lineNumberMatcher.end());
        }

        /**TASK 2 - remove all line numbers (replace with empty strings) : note this will change the lenght of the string
            the easiest way would be just to use the Matcher.replaceAll method which will
            replace ALL PERVIOUS MATCHES with whatever is supplied by the string argument
            notice this fucntion call will return a new string
         **/
        String modified = lineNumberMatcher.replaceAll(""); //in this case replacing them with empty string
        System.out.println("The string without line numbers is: " + modified + "\nthe new string length is "+ modified.length());

        /**TASK 3 - remove all newlines (\n)**/
        //create a pattern to match newline characters
        Pattern newLinePattern = Pattern.compile("\n");
        Matcher newLineMatcher = newLinePattern.matcher(modified); //work with the modified string where we removed line numbers
        //change modified to remove the line numbers
        modified = newLineMatcher.replaceAll("");
        System.out.println("The string without new lines is: " + modified + "\nthe new string length is "+ modified.length());

        
    }
}
